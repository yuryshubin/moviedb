//
//  MoviesVC.swift
//  MovieDB
//
//  Created by Yury Shubin on 22.01.22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

class MoviesVC: UIViewController
{
    private(set) var interactor: MoviesBusinessLogic!
    private(set) var router: (NSObjectProtocol & MoviesRoutingLogic & MoviesDataPassing)!
    
    // MARK: Object lifecycle
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?)
    {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        self.setup()
    }
    
    required init?(coder aDecoder: NSCoder)
    {
        super.init(coder: aDecoder)
        self.setup()
    }
    
    // MARK: Setup
    private func setup()
    {
        let vc = self
        let interactor = MoviesInteractor()
        let presenter = MoviesPresenter()
        let router = MoviesRouter()
        vc.interactor = interactor
        vc.router = router
        interactor.presenter = presenter
        presenter.vc = vc
        router.vc = vc
        router.dataStore = interactor
    }
    
    // MARK: Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?)
    {
        self.router.perform(NSSelectorFromString("routeTo\(segue.identifier!)WithSegue:"), with: segue)
    }
    
    override func shouldPerformSegue(withIdentifier identifier: String, sender: Any?) -> Bool
    {
        return self.router.responds(to: NSSelectorFromString("routeTo\(identifier)WithSegue:"))
    }
	
	// MARK: UI
	@IBOutlet private(set) weak var tableView: UITableView!
	@IBOutlet private weak var activityIndicator: UIActivityIndicatorView!
	private(set) var viewModel: Movies.GetMovies.ViewModel?
	
	private(set) var isLoading: Bool = false
	{
		didSet
		{
			self.isLoading ? self.activityIndicator.startAnimating() : self.activityIndicator.stopAnimating()
		}
	}
}

protocol MoviesDisplayLogic: AnyObject
{
	func displayMovies(viewModel: Movies.GetMovies.ViewModel)
	func selectMovie(movie: Movies.SharedViewModel.DisplayMovie)
}

extension MoviesVC: MoviesDisplayLogic
{
    override func viewDidLoad()
    {
        super.viewDidLoad()
		self.loadNext()
    }
	
	func loadNext() {
		self.isLoading = true
		self.interactor.exec(Movies.GetMovies.Request())
	}
	
	func displayMovies(viewModel: Movies.GetMovies.ViewModel) {
		
		self.isLoading = false
		
		if let error = viewModel.error {
			let alert = UIAlertController(title: "Error", message: error, preferredStyle: .alert)
			alert.addAction(UIAlertAction(title: "OK", style: .default, handler: {_ in
				alert.dismiss(animated: true, completion: nil)
			}))
			self.present(alert, animated: true, completion: nil)
		} else {
			self.viewModel = viewModel
			if viewModel.hasNext
			{
				self.tableView.reloadData()
			}
		}
	}
	
	func selectMovie(movie: Movies.SharedViewModel.DisplayMovie) {
		self.performSegue(withIdentifier: "MovieDetailsVC", sender: self)
	}
}
